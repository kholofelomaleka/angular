ANGULAR 19 TUTORIAL On YOUTUBE - 23/04/2025


PART 1 - INSTALLATION & PROJECT CREATION

Installing NodeJs
https://nodejs.org/en

Installing Angular
$ npm install -g @angular/cli

NPMJS (https://npmjs.com)
Common platform where libraries are found

Creating a project
$ ng new <project-name>

-> package.json - Contains entries of the packages that will be used in the app.
-> node_modules - Packages downloaded from npmjs.com
-> angular.json - Config (Setting) file for project, i.e. all the file linking is done here.
    --> "index": "src/index.html" - Angular is a single page app, therefore the app runs from one index.html
        ---> Inside "index.html" there's the <app-root></app-root> which is the single page application, the whole app renders from here... remains constant
    --> "browser": "src/main.ts" - Firt file to execute, i.e. the starting point
        ---> Inside :main.ts" - There is a reference of (AppComponent,appConfig), which bootstraps the app... i.e. powers the app by creating the app/app.component files.
            ----> app/ - folder contains:
                - app.config.ts - settings file.
                - app.routes.ts - page navigation is handled here.


PART 2 - WHAT IS A COMPONENT?

- Compoments
 -> Consists of 3 files
    1. .css file - Any style pages or sections will go to this file
    2. .html file - The body section of a normal html file will go to this file.
    3. .ts file - ?

 -> Creating a component:
    --> Create components dir
        $ ng generate component <component-name>; 
        $ ng g c <c-name>; -- Short version

    --> From Angular 19, all components are standalone, standalone property is true (standalone: true) by default 
 
 -> Component Decorator (TypeScript)  
  --> Angular Compnents Consist of:
    - Component decorator - Holds info about the Component Class (generated by default):
        - selector - Unique name (tag) used to render the class.
        - imports - All modules needed in the class will be loaded here.
        - templateUrl - The html files used for this class.
        - template - !!! Used in single file component, all the html will go here.
        - styleUrl - The css file used for this class.
        - style - !!! Used in single file component, all the css will go here.
    - Component Class - e.g.
            export class AppComponent {
              title = 'angular19tutorial';
            }
        - Variables for classes are also created in a Component's Class.
        - Functions are also create here.
    - Constructor (optional)
        - Access variables declared in the Component Class

 -> How to Render the Component
  --> Once the components are created, they must be RENDERED:
    ---> Add the new component Class Name to the imports section in the @Component decorator.

  --> How to run the project:
    $ ng serve


PART 3 - WHAT IS DATA BINDING? (Binding data to the template)

- Declare Variables / State in Component
 -> Varibales are created in the Components Class
 -> Class can also have an optional constructor used to access the variables created.

- Data Binding
 -> One Way Data Binding
    --> iterpolation - Accessing / displaying variables using curly brackets, e.g.:
        {{ value }}

    --> propertyBinding:
        - All html elements have properties / attributes e.g. type, name, id...
        - We can provide values from variables to these attributes by wrapping them with square brackets, e.g.:
            <input type="text" [value]="varName" ...> - When the textbox renders, it will render the variable value.

    --> event Binding
        - Because html is interactive, all events (user actions, button click, key presses...) can lead to a response 
          from the application.
          
 -> Two Way Data Binding
    --> Using the ngModel directive
        - ngModel, which allows for two-way data binding. 
          Any changes made in the input will update the firstName property, and vice versa.
    

PART 4 - STRUCTURAL DIRECTIVES


- What is a directive

- Types of Directives

- What are Structural Directives:
    -> ngIf - Used to hide and show 
    -> ngFor - Used like for loop, dynamically create new elements, through iteration.


- Installing Bootstrap (For part 3 example)
    1. download the bootstrap for: https://www.npmjs.com
    2. terminal -> $ npm i bootstrap
    3. go to pakage.json, check if entry is added.
    4. add link to the bootstrap to the angular.json ("styles").